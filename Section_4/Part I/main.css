html {
    background: #b3b3b3;
    padding: 15px;
    border: 5px solid white;
    margin: 15px;
    height: 2000px;
}

body {
    background: #fa923f;
    padding: 20px;
    border: 5px solid black;
    margin: 0;

    /* If we add a overflow: hidden right here, it will be 
       moved to the html selector by default, it's the default
       of browser so we cannot control it. The fix is to also add
       overflow: hidden to the html selector up there. In this way,
       the problem is fixed.

       overflow: hidden;
    */
  }
  
.parent {
    background: white;
    padding: 20px;
    border: 5px solid black;
    margin: 0;

    /* By setting overflow: hidden, the child element will be hidden
       once it is outside of the parent.

       "Outside" can happen in cases like the child uses position: relative
       to move out of the scope of the parent.
    */
    overflow: hidden;
  }
  
.parent div {
    background: rgb(105, 105, 109);
    color: white;
    padding: 10px;
    border: 5px solid black;
    margin: 10px;
}

.parent .child-1 {
  /* By applying position: fixed, the element with child-1 is taken out of
     the normal document flow. That's to say, in the eyes of other elements, 
     this element no longer exists in this place. Therefore, its place is taken. 
  
     Actually, the element is turned into an inline-block element. It just takes
     the space it needs.
  */
  position: fixed;

  /* By using fixed position, the position of the current element only depends
     on the current viewpoint. That's to say, the value is relative to the current
     viewpoint, not anything else.
  */
  top: 0;
  left: 0;

  /* Will make the width equal to content + padding + border, not including margin. */
  box-sizing: border-box;
  
  width: 100%;
  margin: 0;
}

/* Also, the fixed position applies to both block-level and inline html element. */

.parent .child-1 {
  /* For position: relative, the positioning context is the element itself,
     and it will not be taken out of the document flow.
  */
  position: relative;

  /* 
    That's tp say, by setting top and left to 50px, we push the current element
    to the bottom, and to the right, by 50px.
  */
  top: 0;
  left: 50px;

  /* 
  The following line will push the current element to the left by 50px. (Relative
  to its current position.)
  right: 50px;
  */
}

/* 
  To use top, right, bottom, left to position elements, the html element must
  have a position property with a value different from static (the default value).
*/