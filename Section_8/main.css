#product-overview {
    background: linear-gradient(to top, rgba(80, 68, 18, 0.6) 10%, transparent),
      url("images/freedom.jpg") center/cover no-repeat border-box,
      #ff1b68;
    width: 100vw;
    height: 33vh;
    margin-top: 3.5rem;
    position: relative;
  }

#product-overview h1 {
  color: white;
  font-family: "Anton", sans-serif;
  position: absolute;
  bottom: 5%;
  left: 3%;
  font-size: 1.6rem;
}

.section-title {
  color: #2ddf5c;
  text-align: center;
}

.plan {
  background: #d5ffdc;
  text-align: center;
  padding: 1rem;
  margin: 0.5rem 0;
  /* 
    Due to mobile-first design, we assume the screen is very small. In this case, we
    want every plan takes the full width. How to arrange the layout if the screen is
    really big? Do it in the media query.
  */
  /* display: inline-block; */
  width: 100%;
}

.plan--highlighted {
  background: #19b84c;
  color: white;
}

.plan__annotation {
  background: white;
  color: #19b84c;
  padding: 0.5rem;
  box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);
  border-radius: 8px;
}

.plan__title {
  color: #0e4f1f;
}

.plan__price {
  color: #858585;
}

.plan--highlighted .plan__title {
  color: white;
}

.plan--highlighted .plan__price {
  color: #0e4f1f;
}

.plan__features {
  list-style: none;
  margin: 0;
  padding: 0;
}

/* 
  Or relation:
  @media (min-width: 40rem), (orientation: landscape)

  And relation:
  @media (min-width: 40rem) and (orientation: landscape) {
*/
@media (min-width: 40rem) {
  .plan__list {
    width: 100%;
    text-align: center;
  }

  .plan {
    display: inline-block;
    width: 30%;
    vertical-align: middle;
    /* 
      Here we set the min-width to be 13rem for each plan card. The reason is that
      we don't want the card to be too small so that some text cannot be displayed
      properly.
    */
    min-width: 13rem;

    /* 
      Here we set the max-width to be 25rem for each plan card, because as the screen
      size increases, we don't want each plan increases infinitely, we just want it 
      increase to some extent.
    */
    max-width: 25rem;
  }

  .plan--highlighted {
    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);
  }
}

.plan__feature {
  margin: 0.5rem 0;
}

#key-features {
  background: #ff1b68;
  margin-top: 5rem;
  padding: 1rem;
}

#key-features .section-title {
  color: white;
  margin: 2rem;
}

.key-feature__list {
  list-style: none;
  margin: 0;
  padding: 0;
  text-align: center;
}

@media (min-width: 40rem) {
  .key-feature {
    display: inline-block;
    width: 30%;
    /* 
      prevent the width of the badge from increasing infinitely.
    */
    max-width: 25rem;
    vertical-align: top;
  }
}

.key-feature__image {
  background: #ffcede;
  width: 128px;
  height: 128px;
  border: 2px solid #424242;
  border-radius: 50%;
  margin: auto;
  padding: 1.5rem;
}

.key-feature__description {
  text-align: center;
  font-weight: bold;
  color: white;
  font-size: 1.2rem;
}

.modal {
  position: fixed;
  display: none;
  z-index: 200;
  top: 20%;
  left: 30%;
  width: 40%;
  background: white;
  padding: 1rem;
  border: 1px solid #ccc;
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);
}

.modal__title {
  text-align: center;
  margin: 0 0 1rem 0;
}

.modal__actions {
  text-align: center;
}

.modal__action {
  border: 1px solid #0e4f1f;
  background: #0e4f1f;
  text-decoration: none;
  color: white;
  font: inherit;
  padding: 0.5rem 1rem;
  cursor: pointer;
}

.modal__action:hover,
.modal__action:active {
  background: #2ddf5c;
  border-color: #2ddf5c;
}

.modal__action--negative {
  background: red;
  border-color: red;
}

.modal__action--negative:hover,
.modal__action--negative:active {
  background: #ff5454;
  border-color: #ff5454;
}

/* 
  This media can be regarded as a if condition, which means the block will execute
  if the condition is met. 

  For this one, the condition will apply if the width of the screen is bigger than 
  40rem, which is (16px * 40 = 640px)
*/

/* One important thing to note is that we can have as many @media block as we want
   if the condition is the same type. For example, the first one is min-width: 40rem,
   the second one is min-width: 60rem. It's correct. However, if the order is reversed,
   it's not. Since the css file is parsed from top to bottom. The condition in min-width: 40rem
   will override the one we specify in min-width: 60px block. Pay attention to the order!
*/
@media (min-width: 40rem) and (min-height: 40rem) {
  #product-overview {
    height: 40vh;
    background-position: 50% 25%;
  }

  #product-overview h1 {
    font-size: 3rem;
  }
}